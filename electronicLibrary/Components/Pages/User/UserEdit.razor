@page "/users/edit/{userId}"
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer
@inject IUserService UserService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject ILogger<UserEdit> Logger

<PageTitle>Редактирование пользователя</PageTitle>

<h3>Редактирование пользователя</h3>

@if (user == null)
{
    <p>Загрузка данных пользователя...</p>
}
else
{
    <EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-3">
            <label for="fullName">Полное имя:</label>
            <InputText @bind-Value="@user.FullName" id="fullName" class="form-control" />
            <ValidationMessage For="@(() => user.FullName)" />
        </div>

        <div class="form-group mb-3">
            <label for="email">Email:</label>
            <InputText @bind-Value="@user.Email" id="email" class="form-control" />
            <ValidationMessage For="@(() => user.Email)" />
        </div>

        <div class="form-group mb-3">
            <label for="phone">Телефон:</label>
            <InputText @bind-Value="@user.PhoneNumber" id="phone" class="form-control" />
        </div>

        @if (isAdmin)
        {
            <div class="form-group mb-3">
                <label>Роли:</label>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input"
                           @bind="isLibrarian"
                           id="librarianCheck" />
                    <label class="form-check-label" for="librarianCheck">
                        Библиотекарь
                    </label>
                </div>
            </div>
        }

        <div class="form-group">
            <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                @(isProcessing ? "Сохранение..." : "Сохранить")
            </button>
            <button type="button" @onclick="Cancel" class="btn btn-secondary ms-2">
                Отмена
            </button>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
}

@code {
    [Parameter]
    public string UserId { get; set; } = null!;

    private ApplicationUser user = new(); // Инициализация по умолчанию
    private bool isLibrarian;
    private bool isAdmin;
    private bool isProcessing;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Загрузка данных пользователя
            var loadedUser = await UserService.GetUserByIdAsync(UserId);
            if (loadedUser == null)
            {
                errorMessage = "Пользователь не найден";
                return;
            }

            user = loadedUser;

            // Проверка прав текущего пользователя
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            isAdmin = authState.User.IsInRole("Admin");

            // Загрузка ролей редактируемого пользователя
            if (isAdmin)
            {
                isLibrarian = await UserService.IsUserLibrarianAsync(UserId);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ошибка загрузки данных";
            Logger.LogError(ex, "Error loading user data for {UserId}", UserId);
        }
    }

    private async Task HandleValidSubmit()
    {
        isProcessing = true;
        errorMessage = null;

        try
        {
            // Обновление основных данных
            var result = await UserService.UpdateUserAsync(user);
            if (!result.Succeeded)
            {
                errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
                return;
            }

            // Обновление ролей (только для админов)
            if (isAdmin)
            {
                if (isLibrarian)
                {
                    await UserService.SetUserAsLibrarianAsync(UserId);
                }
                else
                {
                    await UserService.RemoveUserFromLibrarianRoleAsync(UserId);
                }
            }

            Navigation.NavigateTo($"/users/{UserId}");
        }
        catch (Exception ex)
        {
            errorMessage = "Ошибка при сохранении данных";
            Logger.LogError(ex, "Error saving user {UserId}", UserId);
        }
        finally
        {
            isProcessing = false;
        }
    }


    private void Cancel()
    {
        Navigation.NavigateTo($"/users/{UserId}");
    }
}