@inject IUserService UserService

<tr>
    <td>@User.FullName</td>
    <td>@User.Email</td>
    <td>@(User.PhoneNumber ?? "-")</td>
    <td>
        @if (isLibrarian)
        {
            <span class="badge bg-success">Библиотекарь</span>
        }
        else
        {
            <span class="badge bg-secondary">Пользователь</span>
        }
    </td>
    <td>
        @{
            var loans = User.BookLoans?.Count(bl => !bl.ReturnDate.HasValue) ?? 0;
            var overdue = User.BookLoans?.Count(bl => bl.IsOverdue) ?? 0;
        }
        <span class="@(overdue > 0 ? "text-danger" : "")">
            @loans (@overdue просрочено)
        </span>
    </td>
    <td>
        <button @onclick="() => ViewUser(User.Id)"
                class="btn btn-sm btn-info">
            Просмотр
        </button>
        <button @onclick="ToggleRole"
                class="btn btn-sm @(isLibrarian ? "btn-warning" : "btn-outline-warning") ms-1">
            @(isLibrarian ? "Разжаловать" : "Назначить")
        </button>
        <button @onclick="Delete"
                class="btn btn-sm btn-danger ms-1">
            Удалить
        </button>
    </td>
</tr>

@code {
    [Parameter]
    public ApplicationUser User { get; set; }

    [Parameter]
    public EventCallback<string> OnDelete { get; set; }

    [Parameter]
    public EventCallback<string> OnToggleRole { get; set; }

    private bool isLibrarian;

    protected override async Task OnInitializedAsync()
    {
        isLibrarian = await UserService.IsUserLibrarianAsync(User.Id);
    }

    private void ViewUser(string id)
    {
        // Реализация навигации
    }

    private async Task ToggleRole()
    {
        await OnToggleRole.InvokeAsync(User.Id);
        isLibrarian = await UserService.IsUserLibrarianAsync(User.Id);
    }

    private async Task Delete()
    {
        await OnDelete.InvokeAsync(User.Id);
    }
}