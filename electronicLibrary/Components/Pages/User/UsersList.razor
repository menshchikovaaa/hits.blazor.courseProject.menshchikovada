@page "/admin/users"
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@inject IUserService UserService
@inject NavigationManager Navigation

<PageTitle>Управление пользователями</PageTitle>

<h3>Управление пользователями</h3>

<div class="mb-3">
    <button @onclick="ShowCreateDialog" class="btn btn-primary">
        Создать нового пользователя
    </button>
</div>

@if (users == null)
{
    <p>Загрузка...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Имя</th>
                <th>Email</th>
                <th>Роли</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.FullName</td>
                    <td>@user.Email</td>
                    <td>
                        @{
                            var roles = userRoles.TryGetValue(user.Id, out var r) ? r : new List<string>();
                            @string.Join(", ", roles)
                        }
                    </td>
                    <td>
                        <button @onclick="() => OpenEditDialog(user)"
                                class="btn btn-sm btn-warning">
                            Изменить роли
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Диалог создания пользователя -->
@if (showCreateDialog)
{
    <div class="modal" style="display:block; background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Создание пользователя</h5>
                    <button @onclick="CloseCreateDialog" class="btn-close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="newUser" OnValidSubmit="CreateUser">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label>Полное имя</label>
                            <InputText @bind-Value="newUser.FullName" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label>Email</label>
                            <InputText @bind-Value="newUser.Email" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label>Пароль</label>
                            <InputText type="password" @bind-Value="newUser.Password" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label>Роль</label>
                            <select @bind="newUser.SelectedRole" class="form-select">
                                <option value="User">Читатель</option>
                                <option value="Librarian">Библиотекарь</option>
                                <option value="Admin">Администратор</option>
                            </select>
                        </div>

                        <button type="submit" class="btn btn-primary">Создать</button>
                        <button type="button" @onclick="CloseCreateDialog"
                                class="btn btn-secondary ms-2">
                            Отмена
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Диалог изменения ролей -->
@if (showEditDialog && currentUser != null)
{
    <div class="modal" style="display:block; background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Изменение ролей для @currentUser.Email</h5>
                    <button @onclick="CloseEditDialog" class="btn-close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        @foreach (var role in allRoles)
                        {
                            <div class="form-check">
                                <input type="checkbox"
                                       checked="@(userRoles.TryGetValue(currentUser.Id, out var roles) && roles.Contains(role.Name))"
                                       @onchange="@(async (e) => await ToggleUserRole(currentUser, role.Name, e.Value))"
                                       class="form-check-input" />
                                <label class="form-check-label">@role.Name</label>
                            </div>
                        }
                    </div>
                    <button @onclick="CloseEditDialog" class="btn btn-secondary">Закрыть</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ApplicationUser> users = new();
    private List<IdentityRole> allRoles = new();
    private bool showCreateDialog;
    private bool showEditDialog;
    private ApplicationUser? currentUser;
    private Dictionary<string, List<string>> userRoles = new();

    private class NewUserModel
    {
        [Required] public string FullName { get; set; } = "";
        [Required][EmailAddress] public string Email { get; set; } = "";
        [Required][MinLength(6)] public string Password { get; set; } = "";
        public string SelectedRole { get; set; } = "User";
    }

    private NewUserModel newUser = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        await LoadRoles();
    }

    private async Task LoadUsers()
    {
        users = await UserService.GetUsersAsync();
        userRoles.Clear();

        foreach (var user in users)
        {
            userRoles[user.Id] = (await UserService.GetUserRolesAsync(user.Id)).ToList();
        }
    }

    private async Task LoadRoles()
    {
        await UserService.EnsureRolesExistAsync();
        allRoles = (await UserService.GetAllRolesAsync()).ToList();
    }

    private void ShowCreateDialog()
    {
        newUser = new NewUserModel();
        showCreateDialog = true;
    }

    private void CloseCreateDialog()
    {
        showCreateDialog = false;
    }

    private async Task CreateUser()
    {
        var user = new ApplicationUser
            {
                UserName = newUser.Email,
                Email = newUser.Email,
                FullName = newUser.FullName
            };

        var result = await UserService.CreateUserAsync(user, newUser.Password);

        if (result.Succeeded)
        {
            await UserService.UpdateUserRolesAsync(user.Id,
                new List<string> { newUser.SelectedRole },
                new List<string>());
            await LoadUsers();
            showCreateDialog = false;
        }
    }

    private async Task OpenEditDialog(ApplicationUser user)
    {
        currentUser = user;
        showEditDialog = true;
    }

    private void CloseEditDialog()
    {
        showEditDialog = false;
        currentUser = null;
    }

    private async Task ToggleUserRole(ApplicationUser user, string roleName, object isChecked)
    {
        try
        {
            var rolesToAdd = (bool)isChecked ? new List<string> { roleName } : new List<string>();
            var rolesToRemove = (bool)isChecked ? new List<string>() : new List<string> { roleName };

            await UserService.UpdateUserRolesAsync(user.Id, rolesToAdd, rolesToRemove);
            userRoles[user.Id] = (await UserService.GetUserRolesAsync(user.Id)).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка изменения роли: {ex.Message}");
        }
    }
}