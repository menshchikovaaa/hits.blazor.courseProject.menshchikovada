@inject IBookLoanService BookLoanService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

<div class="user-dashboard">
    <h3>Мой профиль</h3>
    
    <div class="row mt-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5>Мои книги</h5>
                </div>
                <div class="card-body">
                    @if (loans == null)
                    {
                        <p>Загрузка данных...</p>
                    }
                    else if (!loans.Any())
                    {
                        <p>У вас нет взятых книг</p>
                    }
                    else
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Книга</th>
                                    <th>Дата выдачи</th>
                                    <th>Срок возврата</th>
                                    <th>Статус</th>
                                    <th>Действия</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var loan in loans)
                                {
                                    <tr class="@(loan.IsOverdue ? "table-warning" : "")">
                                        <td>@loan.Book.Title</td>
                                        <td>@loan.LoanDate.ToShortDateString()</td>
                                        <td>@loan.DueDate.ToShortDateString()</td>
                                        <td>
                                            @if (loan.ReturnDate.HasValue)
                                            {
                                                <span class="badge bg-secondary">Возвращена</span>
                                            }
                                            else if (loan.IsOverdue)
                                            {
                                                <span class="badge bg-danger">Просрочена</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-success">Активна</span>
                                            }
                                        </td>
                                        <td>
                                            @if (!loan.ReturnDate.HasValue)
                                            {
                                                <button @onclick="() => ShowReturnDialog(loan)"
                                                        class="btn btn-sm btn-primary">
                                                    Вернуть
                                                </button>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    @if (showReturnDialog)
                    {
                        <div class="modal" style="display:block; background: rgba(0,0,0,0.5);">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Подтверждение возврата</h5>
                                    </div>
                                    <div class="modal-body">
                                        <p>Вы действительно хотите вернуть книгу <strong>@currentLoan?.Book.Title</strong>?</p>
                                        <div class="form-check mt-3">
                                            <input class="form-check-input" type="checkbox" @bind="confirmGoodCondition">
                                            <label class="form-check-label">Подтверждаю, что книга в хорошем состоянии</label>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button @onclick="ReturnBook" class="btn btn-primary" disabled="@(!confirmGoodCondition)">
                                            Подтвердить возврат
                                        </button>
                                        <button @onclick="CloseReturnDialog" class="btn btn-secondary">Отмена</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">@errorMessage</div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>Моя статистика</h5>
                </div>
                <div class="card-body">
                    <p>Всего книг взято: @totalBooks</p>
                    <p>Активных займов: @activeLoans</p>
                    <p>Просроченных: @overdueLoans</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<BookLoan> loans = new();
    [Parameter]
    public string UserId { get; set; }

    private int totalBooks;
    private int activeLoans;
    private int overdueLoans;
    private bool showReturnDialog;
    private BookLoan? currentLoan;
    private bool confirmGoodCondition;
    private string? errorMessage;
    private string? currentUserId;
    
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (currentUserId != UserId)
        {
            errorMessage = "Вы можете просматривать только свои займы";
            return;
        }

        await LoadLoans();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        
        if (!string.IsNullOrEmpty(userId))
        {
            loans = await BookLoanService.GetUserLoansAsync(userId);
            totalBooks = loans.Count;
            activeLoans = loans.Count(l => !l.ReturnDate.HasValue);
            overdueLoans = loans.Count(l => l.IsOverdue);
        }
    }
    private async Task LoadLoans()
    {
        loans = await BookLoanService.GetUserLoansAsync(UserId);
    }

    private void ShowReturnDialog(BookLoan loan)
    {
        currentLoan = loan;
        showReturnDialog = true;
        confirmGoodCondition = false;
        errorMessage = null;
    }

    private async Task ReturnBook()
    {
        try
        {
            if (currentLoan == null) return;

            await BookLoanService.ReturnBookAsync(currentLoan.Id, currentUserId);
            showReturnDialog = false;
            await LoadLoans();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void CloseReturnDialog()
    {
        showReturnDialog = false;
    }
}