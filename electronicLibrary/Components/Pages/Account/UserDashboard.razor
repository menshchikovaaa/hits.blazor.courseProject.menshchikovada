@inject IBookLoanService BookLoanService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore

<PageTitle>Мой профиль</PageTitle>

<h3>Мои книги</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (loans == null)
{
    <p>Загрузка данных...</p>
}
else if (!loans.Any())
{
    <p>У вас нет взятых книг</p>
}
else
{
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Название книги</th>
                    <th>Дата выдачи</th>
                    <th>Срок возврата</th>
                    <th>Статус</th>
                    <th>Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var loan in loans)
                {
                    <tr class="@(loan.IsOverdue ? "table-warning" : "")">
                        <td>@loan.Book?.Title</td>
                        <td>@loan.LoanDate.ToShortDateString()</td>
                        <td>@loan.DueDate.ToShortDateString()</td>
                        <td>
                            @if (loan.ReturnDate.HasValue)
                            {
                                <span class="badge bg-secondary">Возвращена</span>
                            }
                            else if (loan.IsOverdue)
                            {
                                <span class="badge bg-danger">Просрочена</span>
                            }
                            else
                            {
                                <span class="badge bg-success">Активна</span>
                            }
                        </td>
                        <td>
                            @if (!loan.ReturnDate.HasValue)
                            {
                                <div class="btn-group" role="group">
                                    <button @onclick="() => ShowRenewDialog(loan)"
                                            class="btn btn-sm btn-outline-primary">
                                        Продлить
                                    </button>
                                    <button @onclick="() => ShowReturnDialog(loan)"
                                            class="btn btn-sm btn-primary">
                                        Вернуть
                                    </button>
                                </div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Диалог продления книги -->
@if (showRenewDialog && currentLoan != null)
{
    <div class="modal" style="display:block; background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Продление книги</h5>
                    <button @onclick="CloseRenewDialog" class="btn-close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Книга: <strong>@currentLoan.Book?.Title</strong></label>
                    </div>
                    <div class="mb-3">
                        <label>Текущий срок возврата: @currentLoan.DueDate.ToShortDateString()</label>
                    </div>
                    <div class="mb-3">
                        <label for="daysInput">На сколько дней продлить?</label>
                        <input type="number" @bind="additionalDays" class="form-control" id="daysInput" min="1" max="30" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button @onclick="RenewLoan" class="btn btn-primary" disabled="@(additionalDays <= 0)">
                        Подтвердить
                    </button>
                    <button @onclick="CloseRenewDialog" class="btn btn-secondary">Отмена</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Диалог возврата книги -->
@if (showReturnDialog && currentLoan != null)
{
    <div class="modal" style="display:block; background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Подтверждение возврата</h5>
                    <button @onclick="CloseReturnDialog" class="btn-close"></button>
                </div>
                <div class="modal-body">
                    <p>Вы действительно хотите вернуть книгу <strong>@currentLoan.Book?.Title</strong>?</p>
                    <div class="form-check mt-3">
                        <input class="form-check-input" type="checkbox" @bind="confirmGoodCondition">
                        <label class="form-check-label">Подтверждаю, что книга в хорошем состоянии</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button @onclick="ReturnBook" class="btn btn-primary" disabled="@(!confirmGoodCondition)">
                        Подтвердить возврат
                    </button>
                    <button @onclick="CloseReturnDialog" class="btn btn-secondary">Отмена</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<BookLoan> loans = new();
    private BookLoan? currentLoan;
    private bool showReturnDialog;
    private bool showRenewDialog;
    private bool confirmGoodCondition;
    private int additionalDays = 7;
    private string? errorMessage;
    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                errorMessage = "Не удалось идентифицировать пользователя";
                return;
            }

            await LoadUserLoans();
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка загрузки данных: {ex.Message}";
        }
    }

    private async Task LoadUserLoans()
    {
        loans = await BookLoanService.GetUserCurrentLoansAsync(userId);
    }

    private void ShowReturnDialog(BookLoan loan)
    {
        currentLoan = loan;
        showReturnDialog = true;
        confirmGoodCondition = false;
    }

    private void ShowRenewDialog(BookLoan loan)
    {
        currentLoan = loan;
        showRenewDialog = true;
        additionalDays = 7;
    }

    private async Task ReturnBook()
    {
        try
        {
            if (currentLoan == null) return;

            var returnedLoan = await BookLoanService.ReturnBookAsync(currentLoan.Id, userId);
            if (returnedLoan != null)
            {
                await LoadUserLoans();
                showReturnDialog = false;
            }
            Navigation.NavigateTo($"/account", forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при возврате книги: {ex.Message}";
        }
    }

    private async Task RenewLoan()
    {
        try
        {
            if (currentLoan == null || additionalDays <= 0) return;

            var renewedLoan = await BookLoanService.RenewLoanAsync(currentLoan.Id, additionalDays);
            if (renewedLoan != null)
            {
                await LoadUserLoans();
                showRenewDialog = false;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при продлении книги: {ex.Message}";
        }
    }

    private void CloseReturnDialog()
    {
        showReturnDialog = false;
        currentLoan = null;
    }

    private void CloseRenewDialog()
    {
        showRenewDialog = false;
        currentLoan = null;
    }
}