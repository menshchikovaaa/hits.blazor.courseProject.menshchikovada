@page "/authors"
@attribute [Authorize]
@rendermode InteractiveServer
@inject IAuthorService AuthorService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider

<PageTitle>Авторы</PageTitle>

<h3>Список авторов</h3>

<div class="mb-3">
    <div class="input-group">
        <input @bind="searchTerm" class="form-control" placeholder="Поиск по имени или биографии..." />
        <button @onclick="SearchAuthors" class="btn btn-primary">Поиск</button>
    </div>
</div>

@if (isLibrarian)
{
    <div class="mt-3">
        <button @onclick="AddNewAuthor" class="btn btn-primary">Добавить автора</button>
    </div>
}

@if (authors == null)
{
    <p>Загрузка...</p>
}
else if (!authors.Any())
{
    <p>Авторы не найдены</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Имя</th>
                <th>Количество книг</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var author in authors)
            {
                <tr>
                    <td>@author.FullName</td>
                    <td>@(author.BookAuthors?.Count ?? 0)</td>
                    <td>
                        <button @onclick="() => ViewAuthor(author.Id)"
                                class="btn btn-sm btn-info">
                            Просмотр
                        </button>
                        @if (isLibrarian)
                        {
                            <button @onclick="() => EditAuthor(author.Id)"
                                    class="btn btn-sm btn-warning ms-1">
                                Редактировать
                            </button>
                            <button @onclick="() => DeleteAuthor(author.Id)"
                                    class="btn btn-sm btn-danger ms-1">
                                Удалить
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Author> authors = new();
    private string searchTerm = string.Empty;
    private bool isLibrarian;

    protected override async Task OnInitializedAsync()
    {
        await LoadAuthors();
        await CheckUserRole();
    }

    private async Task LoadAuthors()
    {
        authors = await AuthorService.GetAuthorsAsync();
    }

    private async Task SearchAuthors()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadAuthors();
        }
        else
        {
            authors = await AuthorService.SearchAuthorsAsync(searchTerm);
        }
    }

    private void ViewAuthor(int id)
    {
        Navigation.NavigateTo($"/authors/{id}");
    }

    private void EditAuthor(int id)
    {
        Navigation.NavigateTo($"/authors/edit/{id}");
    }

    private async Task DeleteAuthor(int id)
    {
        try
        {
            await AuthorService.DeleteAuthorAsync(id);
            await LoadAuthors();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при удалении: {ex.Message}");
        }
    }

    private void AddNewAuthor()
    {
        Navigation.NavigateTo("/authors/add");
    }

    private async Task CheckUserRole()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        isLibrarian = authState.User.IsInRole("Librarian");
    }
}