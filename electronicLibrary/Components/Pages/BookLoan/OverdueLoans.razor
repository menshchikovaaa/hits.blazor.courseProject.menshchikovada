@page "/loans/overdue"
@attribute [Authorize(Roles = "Librarian")]
@rendermode InteractiveServer
@inject IBookLoanService LoanService

<h3>Просроченные займы</h3>

@if (loans == null)
{
    <p>Загрузка...</p>
}
else if (!loans.Any())
{
    <div class="alert alert-success">Нет просроченных займов</div>
}
else
{
    <table class="table table-warning">
        <thead>
            <tr>
                <th>Книга</th>
                <th>Читатель</th>
                <th>Дата выдачи</th>
                <th>Срок возврата</th>
                <th>Дней просрочки</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var loan in loans)
            {
                <tr>
                    <td>@loan.Book.Title</td>
                    <td>@loan.User.FullName</td>
                    <td>@loan.LoanDate.ToShortDateString()</td>
                    <td>@loan.DueDate.ToShortDateString()</td>
                    <td>@((DateTime.Now - loan.DueDate).Days)</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<BookLoan> loans = new();

    protected override async Task OnInitializedAsync()
    {
        loans = await LoanService.GetOverdueLoansAsync();
    }
}