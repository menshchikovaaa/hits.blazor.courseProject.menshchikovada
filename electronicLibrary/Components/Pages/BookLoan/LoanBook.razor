@page "/books/loan/{bookId:int}"
@attribute [Authorize]
@rendermode InteractiveServer
@inject IBookLoanService LoanService
@inject IBookService BookService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Выдача книги</PageTitle>

<h3>Выдача книги</h3>

@if (book == null)
{
    <p>Загрузка...</p>
}
else
{
    <div class="card">
        <div class="card-header">
            <h4>@book.Title</h4>
        </div>
        <div class="card-body">
            <p>Доступно экземпляров: @book.AvailableCopies</p>

            <div class="form-group mb-3">
                <label for="days">На сколько дней:</label>
                <input type="number" @bind="loanDays" id="days" class="form-control" min="1" max="30" />
            </div>
        </div>
        <div class="card-footer">
            <button @onclick="ProcessLoan" class="btn btn-primary">Оформить</button>
            <button @onclick="Cancel" class="btn btn-secondary ms-2">Отмена</button>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    [Parameter]
    public int BookId { get; set; }

    private Book? book;
    private int loanDays = 14;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        book = await BookService.GetBookByIdAsync(BookId);
        if (book == null)
        {
            errorMessage = "Книга не найдена";
        }
    }

    private async Task ProcessLoan()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                errorMessage = "Пользователь не идентифицирован";
                return;
            }

            await LoanService.LoanBookAsync(BookId, userId, loanDays);
            Navigation.NavigateTo($"/books/{BookId}");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo($"/books/{BookId}");
    }
}